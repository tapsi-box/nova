version: '3.7'
services:
  # first, we define the three mongo servers that will act as replicas
  # here, we steup the hostname ports, and startup command
  # which is the same as discussed in the previous section
  mongo1:
    hostname: mongo1
    image: docker.artifactory.tapsi.tech/mongo
    expose:
      - 27017
    ports:
      - "30001:27017"
    restart: always
    command: mongod --replSet my-mongo
  mongo2:
    hostname: mongo2
    image: docker.artifactory.tapsi.tech/mongo
    expose:
      - 27017
    ports:
      - "30002:27017"
    restart: always
    command: mongod --replSet my-mongo
  mongo3:
    hostname: mongo3
    image: docker.artifactory.tapsi.tech/mongo
    expose:
      - 27017
    ports:
      - "30003:27017"
    restart: always
    command: mongod --replSet my-mongo

  # finally, we can define the initialization server
  # this runs the `rs.initiate` command to intialize
  # the replica set and connect the three servers to each other
  mongoinit:
    image: docker.artifactory.tapsi.tech/mongo
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    command: >
      mongosh --host mongo1:27017 --eval  ' db = (new Mongo("localhost:27017")).getDB("test"); config = { "_id" : "my-mongo", "members" : [
        {
          "_id" : 0,
          "host" : "mongo1:27017"
        },
        {
          "_id" : 1,
          "host" : "mongo2:27017"
        },
        {
          "_id" : 2,
          "host" : "mongo3:27017"
        }
      ] }; rs.initiate(config); '  


